arquivo = open('threads.txt', 'w') #'w' = writearquivo.write("Thread = Fluxo de Execução dentro de um programa;\n")
arquivo.write("Processo = Tarefas em Execução;\n")
arquivo.write("Todo Processo possui, ao menos, 1 Thread;\n")
arquivo.write("Processos Monothread contem apenas uma thread.\n")
arquivo.write("Processo Multithread: possui partes diferentes de seu código sendo executadas em paralelo,\n")
arquivo.write("aplicações concorrendo eficientemente,\n")
arquivo.write("Uma Thread se comporta de forma semelhante a um processo.\n")
arquivo.write("Em multythread pode-se ter várias threads rodando em um único Processo, \n   diminuindo a sobrecarga de utilizar vários Processos.\n")
arquivo.write("Várias Threads trabalham numa mesma tarefa")
arquivo.write("\nIsso tem um custo.\n\n")
arquivo.write("Ambiente Monothread suporta apenas uma thread:\n    ")
arquivo.write("Cada processo possui seu próprio contexto de hardware, softwrare e espaço de endereçamento;\n    Cada processo possui seu Próprio Espaço de Endereçamento = Comunicação Difícil e Lenta.")
arquivo.write("\n\n")
arquivo.write("Em Multithread: \n   Cada Processo pode possuir vários fluxos de execução (Threads);\n   Várias Threads compartilham o mesmo Espaço de Endereçamento;\n   Isso permite a execução de várias tarefas ao mesmo tempo, servindo ao mesmo propósito;\n   Mininiza a alocação de recursos; \n   Diminui Overhead na criação, troca e eliminação de Processos.\n")
arquivo.write("Threads garantem: Melhor performance, simplicidade, compartilhamento de memória e portabilidade.\n\n")
arquivo.write("Para se trabalhar com Threads é necessário importar o módulo '_thread':\n    import _thread --> esse módulo é para operações mais 'primitivas';\n    Há, também, o módulo threading, voltado para execuções em objetos, interface mais alto nível;\n    O módulo '_thread' funciona como interface para implementação de 'threading';")
arquivo.write("")
arquivo.close()

arquivo = open('threads.txt', 'r') #'r'= read
texto = arquivo.read()
arquivo.close()

print(texto)